// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/PrahaTurbo/url-shortener/internal/storage/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CheckExistence mocks base method.
func (m *MockRepository) CheckExistence(ctx context.Context, shortURL, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistence", ctx, shortURL, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckExistence indicates an expected call of CheckExistence.
func (mr *MockRepositoryMockRecorder) CheckExistence(ctx, shortURL, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistence", reflect.TypeOf((*MockRepository)(nil).CheckExistence), ctx, shortURL, userID)
}

// DeleteURLBatch mocks base method.
func (m *MockRepository) DeleteURLBatch(urls []string, user string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteURLBatch", urls, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteURLBatch indicates an expected call of DeleteURLBatch.
func (mr *MockRepositoryMockRecorder) DeleteURLBatch(urls, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURLBatch", reflect.TypeOf((*MockRepository)(nil).DeleteURLBatch), urls, user)
}

// GetStats mocks base method.
func (m *MockRepository) GetStats(ctx context.Context) (*entity.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", ctx)
	ret0, _ := ret[0].(*entity.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockRepositoryMockRecorder) GetStats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockRepository)(nil).GetStats), ctx)
}

// GetURL mocks base method.
func (m *MockRepository) GetURL(ctx context.Context, shortURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", ctx, shortURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockRepositoryMockRecorder) GetURL(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockRepository)(nil).GetURL), ctx, shortURL)
}

// GetURLsByUserID mocks base method.
func (m *MockRepository) GetURLsByUserID(ctx context.Context, userID string) ([]entity.URLRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLsByUserID", ctx, userID)
	ret0, _ := ret[0].([]entity.URLRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLsByUserID indicates an expected call of GetURLsByUserID.
func (mr *MockRepositoryMockRecorder) GetURLsByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLsByUserID", reflect.TypeOf((*MockRepository)(nil).GetURLsByUserID), ctx, userID)
}

// Ping mocks base method.
func (m *MockRepository) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRepositoryMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRepository)(nil).Ping))
}

// SaveURL mocks base method.
func (m *MockRepository) SaveURL(ctx context.Context, url entity.URLRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveURL", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveURL indicates an expected call of SaveURL.
func (mr *MockRepositoryMockRecorder) SaveURL(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveURL", reflect.TypeOf((*MockRepository)(nil).SaveURL), ctx, url)
}

// SaveURLBatch mocks base method.
func (m *MockRepository) SaveURLBatch(ctx context.Context, urls []*entity.URLRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveURLBatch", ctx, urls)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveURLBatch indicates an expected call of SaveURLBatch.
func (mr *MockRepositoryMockRecorder) SaveURLBatch(ctx, urls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveURLBatch", reflect.TypeOf((*MockRepository)(nil).SaveURLBatch), ctx, urls)
}
