// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/PrahaTurbo/url-shortener/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// DeleteURLs mocks base method.
func (m *MockService) DeleteURLs(ctx context.Context, urls []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteURLs", ctx, urls)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteURLs indicates an expected call of DeleteURLs.
func (mr *MockServiceMockRecorder) DeleteURLs(ctx, urls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURLs", reflect.TypeOf((*MockService)(nil).DeleteURLs), ctx, urls)
}

// GetURL mocks base method.
func (m *MockService) GetURL(ctx context.Context, shortURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", ctx, shortURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockServiceMockRecorder) GetURL(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockService)(nil).GetURL), ctx, shortURL)
}

// GetURLsByUserID mocks base method.
func (m *MockService) GetURLsByUserID(ctx context.Context) ([]models.UserURLsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLsByUserID", ctx)
	ret0, _ := ret[0].([]models.UserURLsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLsByUserID indicates an expected call of GetURLsByUserID.
func (mr *MockServiceMockRecorder) GetURLsByUserID(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLsByUserID", reflect.TypeOf((*MockService)(nil).GetURLsByUserID), ctx)
}

// PingDB mocks base method.
func (m *MockService) PingDB() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingDB")
	ret0, _ := ret[0].(error)
	return ret0
}

// PingDB indicates an expected call of PingDB.
func (mr *MockServiceMockRecorder) PingDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingDB", reflect.TypeOf((*MockService)(nil).PingDB))
}

// SaveBatch mocks base method.
func (m *MockService) SaveBatch(ctx context.Context, batch []models.BatchRequest) ([]models.BatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBatch", ctx, batch)
	ret0, _ := ret[0].([]models.BatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveBatch indicates an expected call of SaveBatch.
func (mr *MockServiceMockRecorder) SaveBatch(ctx, batch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBatch", reflect.TypeOf((*MockService)(nil).SaveBatch), ctx, batch)
}

// SaveURL mocks base method.
func (m *MockService) SaveURL(ctx context.Context, originalURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveURL", ctx, originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveURL indicates an expected call of SaveURL.
func (mr *MockServiceMockRecorder) SaveURL(ctx, originalURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveURL", reflect.TypeOf((*MockService)(nil).SaveURL), ctx, originalURL)
}
